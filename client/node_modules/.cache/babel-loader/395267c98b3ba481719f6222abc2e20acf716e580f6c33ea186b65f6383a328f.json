{"ast":null,"code":"var _jsxFileName = \"/Users/freddydordoni/bootcamp/Project-3-Portfolio-Tracker/client/src/Pages/CryptoContext.js\",\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n//! CRYPTO CONTEXT PAGE\n\nimport { onAuthStateChanged } from \"@firebase/auth\";\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { auth } from \"../firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Crypto = /*#__PURE__*/createContext();\nconst CryptoContext = ({\n  children\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  // create the state and the functions to update the state for the currency and the symbols\n  const [currency, setCurrency] = useState(\"USD\");\n  const [symbol, setSymbol] = useState(\"$\");\n  //TODO : new states for the coins and the loading\n  const [coins, setCoins] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [user, setUser] = useState(null);\n  const [alert, setAlert] = useState({\n    open: false,\n    message: \"\",\n    type: \"success\"\n  }); // state for the alert snack bar\n\n  useEffect(() => {\n    // monitor the auth state of the firebase auth\n    onAuthStateChanged(auth, user => {\n      if (user) {\n        // if the user exists\n        setUser(user); // set the user state to the user\n      } else {\n        // otherwise, set the user state to null\n        setUser(null);\n      }\n    }); // takes the auth and gives a callback function\n  }, []);\n  _s(useEffect(_s(() => {\n    _s();\n    // useEffect to run whatever is rendered inside the component\n\n    //! POTENTIAL ERROR HERE: adding this to fetch the data from the API\n    const fetchCoins = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch(`https://api.coingecko.com/api/v3/coins/ethereum/market_chart?vs_currency=${currency}&days=1`);\n        const data = await response.json();\n        setCoins(data);\n      } catch (error) {\n        console.error(\"Error fetching the coin data:\", error);\n        setAlert({\n          open: true,\n          message: \"Error fetching coin data\",\n          type: \"error\"\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n    useEffect(() => {\n      fetchCoins(); // call the function when the component mounts\n    }, [currency]); // re-fetch whenever currency changes\n    //! WATCH ABOVE FOR POTENTIAL ERROR\n    if (currency === \"USD\") setSymbol(\"$\");else if (currency === \"EUR\") setSymbol(\"€\");else if (currency === \"GBP\") setSymbol(\"£\");else if (currency === \"AUD\") setSymbol(\"A$\");\n  }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\"), [currency]), \"OD7bBpZva5O2jO+Puf00hKivP7c=\"); // adding the currency as a dependency\n\n  return (\n    /*#__PURE__*/\n    // wrapping the whole app in the Crypto context provider\n    _jsxDEV(Crypto.Provider, {\n      value: {\n        currency,\n        symbol,\n        setCurrency,\n        coins,\n        loading,\n        alert,\n        setAlert,\n        user\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s2(CryptoContext, \"M1Dm3hPhIRERzcMV8kQ/0FH/Djk=\");\n_c = CryptoContext;\nexport default CryptoContext;\nexport const CryptoState = () => {\n  _s3();\n  // custom hook to get the state, create a new file called CryptoState.js\n  return useContext(Crypto);\n};\n_s3(CryptoState, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n_c2 = CryptoState;\nvar _c, _c2;\n$RefreshReg$(_c, \"CryptoContext\");\n$RefreshReg$(_c2, \"CryptoState\");","map":{"version":3,"names":["onAuthStateChanged","React","createContext","useContext","useEffect","useState","auth","jsxDEV","_jsxDEV","Crypto","CryptoContext","children","_s2","_s","$RefreshSig$","currency","setCurrency","symbol","setSymbol","coins","setCoins","loading","setLoading","user","setUser","alert","setAlert","open","message","type","fetchCoins","response","fetch","data","json","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","CryptoState","_s3","_c2","$RefreshReg$"],"sources":["/Users/freddydordoni/bootcamp/Project-3-Portfolio-Tracker/client/src/Pages/CryptoContext.js"],"sourcesContent":["//! CRYPTO CONTEXT PAGE\n\nimport { onAuthStateChanged } from \"@firebase/auth\";\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { auth } from \"../firebase\";\n\nconst Crypto = createContext();\n\nconst CryptoContext = ({ children }) => {\n  // create the state and the functions to update the state for the currency and the symbols\n  const [currency, setCurrency] = useState(\"USD\");\n  const [symbol, setSymbol] = useState(\"$\");\n  //TODO : new states for the coins and the loading\n  const [coins, setCoins] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [user, setUser] = useState(null);\n  const [alert, setAlert] = useState({\n    open: false,\n    message: \"\",\n    type: \"success\",\n  }); // state for the alert snack bar\n\n  useEffect(() => {\n    // monitor the auth state of the firebase auth\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        // if the user exists\n        setUser(user); // set the user state to the user\n      } else {\n        // otherwise, set the user state to null\n        setUser(null);\n      }\n    }); // takes the auth and gives a callback function\n  }, []);\n\n  useEffect(() => {\n    // useEffect to run whatever is rendered inside the component\n\n    //! POTENTIAL ERROR HERE: adding this to fetch the data from the API\n    const fetchCoins = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch(\n          `https://api.coingecko.com/api/v3/coins/ethereum/market_chart?vs_currency=${currency}&days=1`\n        );\n        const data = await response.json();\n        setCoins(data);\n      } catch (error) {\n        console.error(\"Error fetching the coin data:\", error);\n        setAlert({\n          open: true,\n          message: \"Error fetching coin data\",\n          type: \"error\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    useEffect(() => {\n      fetchCoins(); // call the function when the component mounts\n    }, [currency]); // re-fetch whenever currency changes\n    //! WATCH ABOVE FOR POTENTIAL ERROR\n    if (currency === \"USD\") setSymbol(\"$\");\n    else if (currency === \"EUR\") setSymbol(\"€\");\n    else if (currency === \"GBP\") setSymbol(\"£\");\n    else if (currency === \"AUD\") setSymbol(\"A$\");\n  }, [currency]); // adding the currency as a dependency\n\n  return (\n    // wrapping the whole app in the Crypto context provider\n    <Crypto.Provider\n      value={{\n        currency,\n        symbol,\n        setCurrency,\n        coins,\n        loading,\n        alert,\n        setAlert,\n        user,\n      }}\n    >\n      {children}\n    </Crypto.Provider>\n  );\n};\n\nexport default CryptoContext;\nexport const CryptoState = () => {\n  // custom hook to get the state, create a new file called CryptoState.js\n  return useContext(Crypto);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}