{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { invariant } from '../utilities/globals/index.js';\nimport { equal } from '@wry/equality';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus.js';\nimport { cloneDeep, compact, getOperationDefinition, Observable, iterateObserversSafely, fixObservableSubclass, getQueryDefinition } from '../utilities/index.js';\nimport { equalByQuery } from './equalByQuery.js';\nvar assign = Object.assign,\n  hasOwnProperty = Object.hasOwnProperty;\nvar ObservableQuery = function (_super) {\n  __extends(ObservableQuery, _super);\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n      queryInfo = _a.queryInfo,\n      options = _a.options;\n    var _this = _super.call(this, function (observer) {\n      try {\n        var subObserver = observer._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch (_a) {}\n      var first = !_this.observers.size;\n      _this.observers.add(observer);\n      var last = _this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n      if (first) {\n        _this.reobserve().catch(function () {});\n      }\n      return function () {\n        if (_this.observers.delete(observer) && !_this.observers.size) {\n          _this.tearDownQuery();\n        }\n      };\n    }) || this;\n    _this.observers = new Set();\n    _this.subscriptions = new Set();\n    _this.queryInfo = queryInfo;\n    _this.queryManager = queryManager;\n    _this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n    _this.isTornDown = false;\n    var _b = queryManager.defaultOptions.watchQuery,\n      _c = _b === void 0 ? {} : _b,\n      _d = _c.fetchPolicy,\n      defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n    var _e = options.fetchPolicy,\n      fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e,\n      _f = options.initialFetchPolicy,\n      initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy : _f;\n    _this.options = __assign(__assign({}, options), {\n      initialFetchPolicy: initialFetchPolicy,\n      fetchPolicy: fetchPolicy\n    });\n    _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n    var opDef = getOperationDefinition(_this.query);\n    _this.queryName = opDef && opDef.name && opDef.name.value;\n    return _this;\n  }\n  Object.defineProperty(ObservableQuery.prototype, \"query\", {\n    get: function get() {\n      return this.lastQuery || this.options.query;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n    get: function get() {\n      return this.options.variables;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ObservableQuery.prototype.result = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var observer = {\n        next: function next(result) {\n          resolve(result);\n          _this.observers.delete(observer);\n          if (!_this.observers.size) {\n            _this.queryManager.removeQuery(_this.queryId);\n          }\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject\n      };\n      var subscription = _this.subscribe(observer);\n    });\n  };\n  ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {\n    if (saveAsLastResult === void 0) {\n      saveAsLastResult = true;\n    }\n    var lastResult = this.getLastResult(true);\n    var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || NetworkStatus.ready;\n    var result = __assign(__assign({}, lastResult), {\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus\n    });\n    var _a = this.options.fetchPolicy,\n      fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n    if (skipCacheDataFor(fetchPolicy) || this.queryManager.getDocumentInfo(this.query).hasForcedResolvers) {} else if (this.waitForOwnResult) {\n      this.queryInfo['updateWatch']();\n    } else {\n      var diff = this.queryInfo.getDiff();\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n      if (equal(result.data, {})) {\n        result.data = void 0;\n      }\n      if (diff.complete) {\n        delete result.partial;\n        if (diff.complete && result.networkStatus === NetworkStatus.loading && (fetchPolicy === 'cache-first' || fetchPolicy === 'cache-only')) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n      if (globalThis.__DEV__ !== false && !diff.complete && !this.options.partialRefetch && !result.loading && !result.data && !result.error) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n    return result;\n  };\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult, variables) {\n    if (!this.last) {\n      return true;\n    }\n    var resultIsDifferent = this.queryManager.getDocumentInfo(this.query).hasNonreactiveDirective ? !equalByQuery(this.query, this.last.result, newResult, this.variables) : !equal(this.last.result, newResult);\n    return resultIsDifferent || variables && !equal(this.last.variables, variables);\n  };\n  ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {\n    var last = this.last;\n    if (last && last[key] && (!variablesMustMatch || equal(last.variables, this.variables))) {\n      return last[key];\n    }\n  };\n  ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {\n    return this.getLast(\"result\", variablesMustMatch);\n  };\n  ObservableQuery.prototype.getLastError = function (variablesMustMatch) {\n    return this.getLast(\"error\", variablesMustMatch);\n  };\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.last;\n    this.isTornDown = false;\n  };\n  ObservableQuery.prototype.resetQueryStoreErrors = function () {\n    this.queryManager.resetErrors(this.queryId);\n  };\n  ObservableQuery.prototype.refetch = function (variables) {\n    var _a;\n    var reobserveOptions = {\n      pollInterval: 0\n    };\n    var fetchPolicy = this.options.fetchPolicy;\n    if (fetchPolicy === 'cache-and-network') {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === 'no-cache') {\n      reobserveOptions.fetchPolicy = 'no-cache';\n    } else {\n      reobserveOptions.fetchPolicy = 'network-only';\n    }\n    if (globalThis.__DEV__ !== false && variables && hasOwnProperty.call(variables, \"variables\")) {\n      var queryDef = getQueryDefinition(this.query);\n      var vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some(function (v) {\n        return v.variable.name.value === \"variables\";\n      })) {\n        globalThis.__DEV__ !== false && invariant.warn(18, variables, ((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || queryDef);\n      }\n    }\n    if (variables && !equal(this.options.variables, variables)) {\n      reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);\n    }\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  };\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign(__assign({}, this.options), {\n      query: this.options.query\n    }), fetchMoreOptions), {\n      variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables)\n    })), {\n      fetchPolicy: \"no-cache\"\n    });\n    combinedOptions.query = this.transformDocument(combinedOptions.query);\n    var qid = this.queryManager.generateQueryId();\n    this.lastQuery = fetchMoreOptions.query ? this.transformDocument(this.options.query) : combinedOptions.query;\n    var queryInfo = this.queryInfo;\n    var originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n    var updatedQuerySet = new Set();\n    return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n      _this.queryManager.removeQuery(qid);\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n      _this.queryManager.cache.batch({\n        update: function update(cache) {\n          var updateQuery = fetchMoreOptions.updateQuery;\n          if (updateQuery) {\n            cache.updateQuery({\n              query: _this.query,\n              variables: _this.variables,\n              returnPartialData: true,\n              optimistic: false\n            }, function (previous) {\n              return updateQuery(previous, {\n                fetchMoreResult: fetchMoreResult.data,\n                variables: combinedOptions.variables\n              });\n            });\n          } else {\n            cache.writeQuery({\n              query: combinedOptions.query,\n              variables: combinedOptions.variables,\n              data: fetchMoreResult.data\n            });\n          }\n        },\n        onWatchUpdated: function onWatchUpdated(watch) {\n          updatedQuerySet.add(watch.query);\n        }\n      });\n      return fetchMoreResult;\n    }).finally(function () {\n      if (!updatedQuerySet.has(_this.query)) {\n        reobserveCacheFirst(_this);\n      }\n    });\n  };\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables,\n      context: options.context\n    }).subscribe({\n      next: function next(subscriptionData) {\n        var updateQuery = options.updateQuery;\n        if (updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function error(err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n        globalThis.__DEV__ !== false && invariant.error(19, err);\n      }\n    });\n    this.subscriptions.add(subscription);\n    return function () {\n      if (_this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n  ObservableQuery.prototype.setOptions = function (newOptions) {\n    return this.reobserve(newOptions);\n  };\n  ObservableQuery.prototype.silentSetOptions = function (newOptions) {\n    var mergedOptions = compact(this.options, newOptions || {});\n    assign(this.options, mergedOptions);\n  };\n  ObservableQuery.prototype.setVariables = function (variables) {\n    if (equal(this.variables, variables)) {\n      return this.observers.size ? this.result() : Promise.resolve();\n    }\n    this.options.variables = variables;\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n    return this.reobserve({\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables: variables\n    }, NetworkStatus.setVariables);\n  };\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var queryManager = this.queryManager;\n    var result = queryManager.cache.diff({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n    var newResult = mapFn(result, {\n      variables: this.variables\n    });\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables\n      });\n      queryManager.broadcastQueries();\n    }\n  };\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  };\n  ObservableQuery.prototype.stopPolling = function () {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  };\n  ObservableQuery.prototype.applyNextFetchPolicy = function (reason, options) {\n    if (options.nextFetchPolicy) {\n      var _a = options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? \"cache-first\" : _a,\n        _b = options.initialFetchPolicy,\n        initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n      if (fetchPolicy === \"standby\") {} else if (typeof options.nextFetchPolicy === \"function\") {\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason: reason,\n          options: options,\n          observable: this,\n          initialFetchPolicy: initialFetchPolicy\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n    return options.fetchPolicy;\n  };\n  ObservableQuery.prototype.fetch = function (options, newNetworkStatus) {\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager['fetchConcastWithInfo'](this.queryId, options, newNetworkStatus);\n  };\n  ObservableQuery.prototype.updatePolling = function () {\n    var _this = this;\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n    var _a = this,\n      pollingInfo = _a.pollingInfo,\n      pollInterval = _a.options.pollInterval;\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n    invariant(pollInterval, 20);\n    var info = pollingInfo || (this.pollingInfo = {});\n    info.interval = pollInterval;\n    var maybeFetch = function maybeFetch() {\n      if (_this.pollingInfo) {\n        if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus)) {\n          _this.reobserve({\n            fetchPolicy: _this.options.initialFetchPolicy === 'no-cache' ? 'no-cache' : 'network-only'\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n      ;\n    };\n    var poll = function poll() {\n      var info = _this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n    poll();\n  };\n  ObservableQuery.prototype.updateLastResult = function (newResult, variables) {\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n    var error = this.getLastError();\n    if (error && this.last && !equal(variables, this.last.variables)) {\n      error = void 0;\n    }\n    return this.last = __assign({\n      result: this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult),\n      variables: variables\n    }, error ? {\n      error: error\n    } : null);\n  };\n  ObservableQuery.prototype.reobserveAsConcast = function (newOptions, newNetworkStatus) {\n    var _this = this;\n    this.isTornDown = false;\n    var useDisposableConcast = newNetworkStatus === NetworkStatus.refetch || newNetworkStatus === NetworkStatus.fetchMore || newNetworkStatus === NetworkStatus.poll;\n    var oldVariables = this.options.variables;\n    var oldFetchPolicy = this.options.fetchPolicy;\n    var mergedOptions = compact(this.options, newOptions || {});\n    var options = useDisposableConcast ? mergedOptions : assign(this.options, mergedOptions);\n    var query = this.transformDocument(options.query);\n    this.lastQuery = query;\n    if (!useDisposableConcast) {\n      this.updatePolling();\n      if (newOptions && newOptions.variables && !equal(newOptions.variables, oldVariables) && options.fetchPolicy !== \"standby\" && options.fetchPolicy === oldFetchPolicy) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n    var fetchOptions = query === options.query ? options : __assign(__assign({}, options), {\n      query: query\n    });\n    this.waitForOwnResult && (this.waitForOwnResult = skipCacheDataFor(fetchOptions.fetchPolicy));\n    var finishWaitingForOwnResult = function finishWaitingForOwnResult() {\n      if (_this.concast === concast) {\n        _this.waitForOwnResult = false;\n      }\n    };\n    var variables = fetchOptions.variables && __assign({}, fetchOptions.variables);\n    var _a = this.fetch(fetchOptions, newNetworkStatus),\n      concast = _a.concast,\n      fromLink = _a.fromLink;\n    var observer = {\n      next: function next(result) {\n        finishWaitingForOwnResult();\n        _this.reportResult(result, variables);\n      },\n      error: function error(_error) {\n        finishWaitingForOwnResult();\n        _this.reportError(_error, variables);\n      }\n    };\n    if (!useDisposableConcast && (fromLink || !this.concast)) {\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n      this.concast = concast;\n      this.observer = observer;\n    }\n    concast.addObserver(observer);\n    return concast;\n  };\n  ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n    return this.reobserveAsConcast(newOptions, newNetworkStatus).promise;\n  };\n  ObservableQuery.prototype.observe = function () {\n    this.reportResult(this.getCurrentResult(false), this.variables);\n  };\n  ObservableQuery.prototype.reportResult = function (result, variables) {\n    var lastError = this.getLastError();\n    var isDifferent = this.isDifferentFromLastResult(result, variables);\n    if (lastError || !result.partial || this.options.returnPartialData) {\n      this.updateLastResult(result, variables);\n    }\n    if (lastError || isDifferent) {\n      iterateObserversSafely(this.observers, \"next\", result);\n    }\n  };\n  ObservableQuery.prototype.reportError = function (error, variables) {\n    var errorResult = __assign(__assign({}, this.getLastResult()), {\n      error: error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false\n    });\n    this.updateLastResult(errorResult, variables);\n    iterateObserversSafely(this.observers, 'error', this.last.error = error);\n  };\n  ObservableQuery.prototype.hasObservers = function () {\n    return this.observers.size > 0;\n  };\n  ObservableQuery.prototype.tearDownQuery = function () {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n    this.stopPolling();\n    this.subscriptions.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  };\n  ObservableQuery.prototype.transformDocument = function (document) {\n    return this.queryManager.transform(document);\n  };\n  return ObservableQuery;\n}(Observable);\nexport { ObservableQuery };\nfixObservableSubclass(ObservableQuery);\nexport function reobserveCacheFirst(obsQuery) {\n  var _a = obsQuery.options,\n    fetchPolicy = _a.fetchPolicy,\n    _nextFetchPolicy = _a.nextFetchPolicy;\n  if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      nextFetchPolicy: function nextFetchPolicy() {\n        this.nextFetchPolicy = _nextFetchPolicy;\n        if (typeof _nextFetchPolicy === \"function\") {\n          return _nextFetchPolicy.apply(this, arguments);\n        }\n        return fetchPolicy;\n      }\n    });\n  }\n  return obsQuery.reobserve();\n}\nfunction defaultSubscriptionObserverErrorCallback(error) {\n  globalThis.__DEV__ !== false && invariant.error(21, error.message, error.stack);\n}\nexport function logMissingFieldErrors(missing) {\n  if (globalThis.__DEV__ !== false && missing) {\n    globalThis.__DEV__ !== false && invariant.debug(22, missing);\n  }\n}\nfunction skipCacheDataFor(fetchPolicy) {\n  return fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\" || fetchPolicy === \"standby\";\n}","map":{"version":3,"names":["invariant","equal","NetworkStatus","isNetworkRequestInFlight","cloneDeep","compact","getOperationDefinition","Observable","iterateObserversSafely","fixObservableSubclass","getQueryDefinition","equalByQuery","assign","Object","hasOwnProperty","ObservableQuery","_super","__extends","_a","queryManager","queryInfo","options","_this","call","observer","subObserver","_subscription","_observer","error","defaultSubscriptionObserverErrorCallback","first","observers","size","add","last","result","next","reobserve","catch","delete","tearDownQuery","Set","subscriptions","waitForOwnResult","skipCacheDataFor","fetchPolicy","isTornDown","_b","defaultOptions","watchQuery","_c","_d","defaultFetchPolicy","_e","_f","initialFetchPolicy","__assign","queryId","generateQueryId","opDef","query","queryName","name","value","defineProperty","prototype","get","lastQuery","variables","Promise","resolve","reject","removeQuery","setTimeout","subscription","unsubscribe","subscribe","getCurrentResult","saveAsLastResult","lastResult","getLastResult","networkStatus","ready","loading","getDocumentInfo","hasForcedResolvers","diff","getDiff","complete","returnPartialData","data","partial","globalThis","__DEV__","partialRefetch","logMissingFieldErrors","missing","updateLastResult","isDifferentFromLastResult","newResult","resultIsDifferent","hasNonreactiveDirective","getLast","key","variablesMustMatch","getLastError","resetLastResults","resetQueryStoreErrors","resetErrors","refetch","reobserveOptions","pollInterval","queryDef","vars","variableDefinitions","some","v","variable","warn","resetLastWrite","fetchMore","fetchMoreOptions","combinedOptions","transformDocument","qid","originalNetworkStatus","notifyOnNetworkStatusChange","observe","fetchQuery","then","fetchMoreResult","cache","batch","updateQuery","optimistic","previous","writeQuery","onWatchUpdated","watch","updatedQuerySet","finally","has","reobserveCacheFirst","subscribeToMore","startGraphQLSubscription","document","context","subscriptionData","err","onError","setOptions","newOptions","silentSetOptions","mergedOptions","setVariables","mapFn","broadcastQueries","startPolling","updatePolling","stopPolling","applyNextFetchPolicy","reason","nextFetchPolicy","observable","fetch","newNetworkStatus","setObservableQuery","ssrMode","pollingInfo","clearTimeout","timeout","interval","poll","info","maybeFetch","assumeImmutableResults","reobserveAsConcast","useDisposableConcast","oldVariables","oldFetchPolicy","fetchOptions","finishWaitingForOwnResult","concast","fromLink","reportResult","reportError","removeObserver","addObserver","promise","lastError","isDifferent","errorResult","errors","graphQLErrors","hasObservers","forEach","sub","clear","stopQuery","obsQuery","apply","arguments","message","stack","debug"],"sources":["/Users/freddydordoni/bootcamp/Project-3-Portfolio-Tracker/client/node_modules/@apollo/src/core/ObservableQuery.ts"],"sourcesContent":["import { invariant } from '../utilities/globals/index.js';\nimport type { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\n\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus.js';\nimport type {\n  Concast,\n  Observer,\n  ObservableSubscription} from '../utilities/index.js';\nimport {\n  cloneDeep,\n  compact,\n  getOperationDefinition,\n  Observable,\n  iterateObserversSafely,\n  fixObservableSubclass,\n  getQueryDefinition,\n} from '../utilities/index.js';\nimport type { ApolloError } from '../errors/index.js';\nimport type { QueryManager } from './QueryManager.js';\nimport type {\n  ApolloQueryResult,\n  OperationVariables,\n  TypedDocumentNode,\n} from './types.js';\nimport type {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  NextFetchPolicyContext,\n  WatchQueryFetchPolicy,\n} from './watchQueryOptions.js';\nimport type { QueryInfo } from './QueryInfo.js';\nimport type { MissingFieldError } from '../cache/index.js';\nimport type { MissingTree } from '../cache/core/types/common.js';\nimport { equalByQuery } from './equalByQuery.js';\n\nconst {\n  assign,\n  hasOwnProperty,\n} = Object;\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  updateQuery?: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    },\n  ) => TData;\n}\n\nexport interface UpdateQueryOptions<TVariables> {\n  variables?: TVariables;\n}\n\ninterface Last<TData, TVariables> {\n  result: ApolloQueryResult<TData>;\n  variables?: TVariables;\n  error?: ApolloError;\n}\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables\n> extends Observable<ApolloQueryResult<TData>> {\n  public readonly options: WatchQueryOptions<TVariables, TData>;\n  public readonly queryId: string;\n  public readonly queryName?: string;\n\n  // The `query` computed property will always reflect the document transformed\n  // by the last run query. `this.options.query` will always reflect the raw\n  // untransformed query to ensure document transforms with runtime conditionals\n  // are run on the original document.\n  public get query(): TypedDocumentNode<TData, TVariables> {\n    return this.lastQuery || this.options.query;\n  }\n\n  // Computed shorthand for this.options.variables, preserved for\n  // backwards compatibility.\n  public get variables(): TVariables | undefined {\n    return this.options.variables;\n  }\n\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<Observer<ApolloQueryResult<TData>>>();\n  private subscriptions = new Set<ObservableSubscription>();\n\n  private waitForOwnResult: boolean;\n  private last?: Last<TData, TVariables>;\n  private lastQuery?: DocumentNode;\n\n  private queryInfo: QueryInfo;\n\n  // When this.concast is defined, this.observer is the Observer currently\n  // subscribed to that Concast.\n  private concast?: Concast<ApolloQueryResult<TData>>;\n  private observer?: Observer<ApolloQueryResult<TData>>;\n\n  private pollingInfo?: {\n    interval: number;\n    timeout: ReturnType<typeof setTimeout>;\n  };\n\n  constructor({\n    queryManager,\n    queryInfo,\n    options,\n  }: {\n    queryManager: QueryManager<any>;\n    queryInfo: QueryInfo;\n    options: WatchQueryOptions<TVariables, TData>;\n  }) {\n    super((observer: Observer<ApolloQueryResult<TData>>) => {\n      // Zen Observable has its own error function, so in order to log correctly\n      // we need to provide a custom error callback.\n      try {\n        var subObserver = (observer as any)._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch {}\n\n      const first = !this.observers.size;\n      this.observers.add(observer);\n\n      // Deliver most recent error or result.\n      const last = this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n\n      // Initiate observation of this query if it hasn't been reported to\n      // the QueryManager yet.\n      if (first) {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n        this.reobserve().catch(() => {});\n      }\n\n      return () => {\n        if (this.observers.delete(observer) && !this.observers.size) {\n          this.tearDownQuery();\n        }\n      };\n    });\n\n    // related classes\n    this.queryInfo = queryInfo;\n    this.queryManager = queryManager;\n\n    // active state\n    this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n    this.isTornDown = false;\n\n    const {\n      watchQuery: {\n        fetchPolicy: defaultFetchPolicy = \"cache-first\",\n      } = {},\n    } = queryManager.defaultOptions;\n\n    const {\n      fetchPolicy = defaultFetchPolicy,\n      initialFetchPolicy = (\n        // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy\n      ),\n    } = options;\n\n    this.options = {\n      ...options,\n\n      // Remember the initial options.fetchPolicy so we can revert back to this\n      // policy when variables change. This information can also be specified\n      // (or overridden) by providing options.initialFetchPolicy explicitly.\n      initialFetchPolicy,\n\n      // This ensures this.options.fetchPolicy always has a string value, in\n      // case options.fetchPolicy was not provided.\n      fetchPolicy,\n    };\n\n    this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n\n    const opDef = getOperationDefinition(this.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n  }\n\n  public result(): Promise<ApolloQueryResult<TData>> {\n    return new Promise((resolve, reject) => {\n      // TODO: this code doesn’t actually make sense insofar as the observer\n      // will never exist in this.observers due how zen-observable wraps observables.\n      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n      const observer: Observer<ApolloQueryResult<TData>> = {\n        next: (result: ApolloQueryResult<TData>) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  public getCurrentResult(saveAsLastResult = true): ApolloQueryResult<TData> {\n    // Use the last result as long as the variables match this.variables.\n    const lastResult = this.getLastResult(true);\n\n    const networkStatus =\n      this.queryInfo.networkStatus ||\n      (lastResult && lastResult.networkStatus) ||\n      NetworkStatus.ready;\n\n    const result = {\n      ...lastResult,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus,\n    } as ApolloQueryResult<TData>;\n\n    const { fetchPolicy = \"cache-first\" } = this.options;\n    if (\n      // These fetch policies should never deliver data from the cache, unless\n      // redelivering a previously delivered result.\n      skipCacheDataFor(fetchPolicy) ||\n      // If this.options.query has @client(always: true) fields, we cannot\n      // trust diff.result, since it was read from the cache without running\n      // local resolvers (and it's too late to run resolvers now, since we must\n      // return a result synchronously).\n      this.queryManager.getDocumentInfo(this.query).hasForcedResolvers\n    ) {\n      // Fall through. \n    } else if (this.waitForOwnResult) {\n      // This would usually be a part of `QueryInfo.getDiff()`. \n      // which we skip in the waitForOwnResult case since we are not\n      // interested in the diff.\n      this.queryInfo['updateWatch']();\n    } else {\n      const diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0 as any;\n      }\n\n      if (diff.complete) {\n        // Similar to setting result.partial to false, but taking advantage of the\n        // falsiness of missing fields.\n        delete result.partial;\n\n        // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next result\n        // we receive will have NetworkStatus.ready and !loading.\n        if (\n          diff.complete &&\n          result.networkStatus === NetworkStatus.loading &&\n          (fetchPolicy === 'cache-first' ||\n          fetchPolicy === 'cache-only')\n        ) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      if (\n        __DEV__ &&\n        !diff.complete &&\n        !this.options.partialRefetch &&\n        !result.loading &&\n        !result.data &&\n        !result.error\n      ) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables?: TVariables\n  ) {\n    if (!this.last) {\n      return true;\n    }\n\n    const resultIsDifferent =\n      this.queryManager.getDocumentInfo(this.query).hasNonreactiveDirective\n        ? !equalByQuery(\n            this.query,\n            this.last.result,\n            newResult,\n            this.variables,\n          )\n        : !equal(this.last.result, newResult);\n\n    return (\n      resultIsDifferent ||\n      (variables && !equal(this.last.variables, variables))\n    );\n  }\n\n  private getLast<K extends keyof Last<TData, TVariables>>(\n    key: K,\n    variablesMustMatch?: boolean,\n  ) {\n    const last = this.last;\n    if (\n      last &&\n      last[key] &&\n      (!variablesMustMatch || equal(last.variables, this.variables))\n    ) {\n      return last[key];\n    }\n  }\n\n  public getLastResult(variablesMustMatch?: boolean): ApolloQueryResult<TData> | undefined {\n    return this.getLast(\"result\", variablesMustMatch);\n  }\n\n  public getLastError(variablesMustMatch?: boolean): ApolloError | undefined {\n    return this.getLast(\"error\", variablesMustMatch);\n  }\n\n  public resetLastResults(): void {\n    delete this.last;\n    this.isTornDown = false;\n  }\n\n  public resetQueryStoreErrors() {\n    this.queryManager.resetErrors(this.queryId);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(variables?: Partial<TVariables>): Promise<ApolloQueryResult<TData>> {\n    const reobserveOptions: Partial<WatchQueryOptions<TVariables, TData>> = {\n      // Always disable polling for refetches.\n      pollInterval: 0,\n    };\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    const { fetchPolicy } = this.options;\n    if (fetchPolicy === 'cache-and-network') {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === 'no-cache') {\n      reobserveOptions.fetchPolicy = 'no-cache';\n    } else {\n      reobserveOptions.fetchPolicy = 'network-only';\n    }\n\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      const queryDef = getQueryDefinition(this.query);\n      const vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some(v => v.variable.name.value === \"variables\")) {\n        invariant.warn(`Called refetch(%o) for query %o, which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?`,\n          variables,\n          queryDef.name?.value || queryDef\n        );\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = {\n        ...this.options.variables,\n        ...variables,\n      } as TVariables;\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  }\n\n  public fetchMore<\n    TFetchData = TData,\n    TFetchVars extends OperationVariables = TVariables,\n  >(fetchMoreOptions: FetchMoreQueryOptions<TFetchVars, TFetchData> & {\n    updateQuery?: (\n      previousQueryResult: TData,\n      options: {\n        fetchMoreResult: TFetchData;\n        variables: TFetchVars;\n      },\n    ) => TData;\n  }): Promise<ApolloQueryResult<TFetchData>> {\n    const combinedOptions = {\n      ...(fetchMoreOptions.query ? fetchMoreOptions : {\n        ...this.options,\n        query: this.options.query,\n        ...fetchMoreOptions,\n        variables: {\n          ...this.options.variables,\n          ...fetchMoreOptions.variables,\n        },\n      }),\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\",\n    } as WatchQueryOptions<TFetchVars, TFetchData>;\n\n    combinedOptions.query = this.transformDocument(combinedOptions.query);\n\n    const qid = this.queryManager.generateQueryId();\n\n    // If a temporary query is passed to `fetchMore`, we don't want to store\n    // it as the last query result since it may be an optimized query for\n    // pagination. We will however run the transforms on the original document\n    // as well as the document passed in `fetchMoreOptions` to ensure the cache\n    // uses the most up-to-date document which may rely on runtime conditionals.\n    this.lastQuery = fetchMoreOptions.query\n      ? this.transformDocument(this.options.query)\n      : combinedOptions.query;\n\n    // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n    const { queryInfo } = this;\n    const originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n\n    const updatedQuerySet = new Set<DocumentNode>();\n\n    return this.queryManager.fetchQuery(\n      qid,\n      combinedOptions,\n      NetworkStatus.fetchMore,\n    ).then(fetchMoreResult => {\n      this.queryManager.removeQuery(qid);\n\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n\n      // Performing this cache update inside a cache.batch transaction ensures\n      // any affected cache.watch watchers are notified at most once about any\n      // updates. Most watchers will be using the QueryInfo class, which\n      // responds to notifications by calling reobserveCacheFirst to deliver\n      // fetchMore cache results back to this ObservableQuery.\n      this.queryManager.cache.batch({\n        update: cache => {\n          const { updateQuery } = fetchMoreOptions;\n          if (updateQuery) {\n            cache.updateQuery({\n              query: this.query,\n              variables: this.variables,\n              returnPartialData: true,\n              optimistic: false,\n            }, previous => updateQuery(previous!, {\n              fetchMoreResult: fetchMoreResult.data,\n              variables: combinedOptions.variables as TFetchVars,\n            }));\n\n          } else {\n            // If we're using a field policy instead of updateQuery, the only\n            // thing we need to do is write the new data to the cache using\n            // combinedOptions.variables (instead of this.variables, which is\n            // what this.updateQuery uses, because it works by abusing the\n            // original field value, keyed by the original variables).\n            cache.writeQuery({\n              query: combinedOptions.query,\n              variables: combinedOptions.variables,\n              data: fetchMoreResult.data,\n            });\n          }\n        },\n\n        onWatchUpdated: watch => {\n          // Record the DocumentNode associated with any watched query whose\n          // data were updated by the cache writes above.\n          updatedQuerySet.add(watch.query);\n        },\n      });\n\n      return fetchMoreResult;\n\n    }).finally(() => {\n      // In case the cache writes above did not generate a broadcast\n      // notification (which would have been intercepted by onWatchUpdated),\n      // likely because the written data were the same as what was already in\n      // the cache, we still want fetchMore to deliver its final loading:false\n      // result with the unchanged data.\n      if (!updatedQuerySet.has(this.query)) {\n        reobserveCacheFirst(this);\n      }\n    });\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables extends OperationVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >,\n  ) {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n        context: options.context,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: TSubscriptionData }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery<TSubscriptionVariables>(\n              (previous, { variables }) =>\n                updateQuery(previous, {\n                  subscriptionData,\n                  variables,\n                }),\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error('Unhandled GraphQL subscription error', err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  public setOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.reobserve(newOptions);\n  }\n\n  public silentSetOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>,\n  ) {\n    const mergedOptions = compact(this.options, newOptions || {});\n    assign(this.options, mergedOptions);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. Most users should prefer `refetch` instead of\n   * `setVariables` in order to to be properly notified of results even when\n   * they come from the cache.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @private\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public setVariables(\n    variables: TVariables,\n  ): Promise<ApolloQueryResult<TData> | void> {\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size\n        ? this.result()\n        : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve({\n      // Reset options.fetchPolicy to its original value.\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables,\n    }, NetworkStatus.setVariables);\n  }\n\n  public updateQuery<TVars extends OperationVariables = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: Pick<WatchQueryOptions<TVars, TData>, \"variables\">,\n    ) => TData,\n  ): void {\n    const { queryManager } = this;\n    const { result } = queryManager.cache.diff<TData>({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false,\n    });\n\n    const newResult = mapFn(result!, {\n      variables: (this as any).variables,\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables,\n      });\n\n      queryManager.broadcastQueries();\n    }\n  }\n\n  public startPolling(pollInterval: number) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  }\n\n  public stopPolling() {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  }\n\n  // Update options.fetchPolicy according to options.nextFetchPolicy.\n  private applyNextFetchPolicy(\n    reason: NextFetchPolicyContext<TData, TVariables>[\"reason\"],\n    // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options: WatchQueryOptions<TVariables, TData>,\n  ) {\n    if (options.nextFetchPolicy) {\n      const {\n        fetchPolicy = \"cache-first\",\n        initialFetchPolicy = fetchPolicy,\n      } = options;\n\n      if (fetchPolicy === \"standby\") {\n        // Do nothing, leaving options.fetchPolicy unchanged.\n      } else if (typeof options.nextFetchPolicy === \"function\") {\n        // When someone chooses \"cache-and-network\" or \"network-only\" as their\n        // initial FetchPolicy, they often do not want future cache updates to\n        // trigger unconditional network requests, which is what repeatedly\n        // applying the \"cache-and-network\" or \"network-only\" policies would\n        // seem to imply. Instead, when the cache reports an update after the\n        // initial network request, it may be desirable for subsequent network\n        // requests to be triggered only if the cache result is incomplete. To\n        // that end, the options.nextFetchPolicy option provides an easy way to\n        // update options.fetchPolicy after the initial network request, without\n        // having to call observableQuery.setOptions.\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason,\n          options,\n          observable: this,\n          initialFetchPolicy,\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n\n    return options.fetchPolicy;\n  }\n\n  private fetch(\n    options: WatchQueryOptions<TVariables, TData>,\n    newNetworkStatus?: NetworkStatus,\n  ) {\n    // TODO Make sure we update the networkStatus (and infer fetchVariables)\n    // before actually committing to the fetch.\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager['fetchConcastWithInfo'](\n      this.queryId,\n      options,\n      newNetworkStatus,\n    );\n  }\n\n  // Turns polling on or off based on this.options.pollInterval.\n  private updatePolling() {\n    // Avoid polling in SSR mode\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    const {\n      pollingInfo,\n      options: {\n        pollInterval,\n      },\n    } = this;\n\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n\n    if (pollingInfo &&\n        pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    invariant(\n      pollInterval,\n      'Attempted to start a polling query without a polling interval.',\n    );\n\n    const info = pollingInfo || (this.pollingInfo = {} as any);\n    info.interval = pollInterval;\n\n    const maybeFetch = () => {\n      if (this.pollingInfo) {\n        if (!isNetworkRequestInFlight(this.queryInfo.networkStatus)) {\n          this.reobserve({\n            // Most fetchPolicy options don't make sense to use in a polling context, as\n            // users wouldn't want to be polling the cache directly. However, network-only and\n            // no-cache are both useful for when the user wants to control whether or not the\n            // polled results are written to the cache.\n            fetchPolicy: this.options.initialFetchPolicy === 'no-cache' ? 'no-cache' : 'network-only',\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      };\n    };\n\n    const poll = () => {\n      const info = this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  }\n\n  private updateLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables = this.variables,\n  ) {\n    let error: ApolloError | undefined = this.getLastError();\n    // Preserve this.last.error unless the variables have changed.\n    if (error && this.last && !equal(variables, this.last.variables)) {\n      error = void 0;\n    }\n    return this.last = {\n      result: this.queryManager.assumeImmutableResults\n        ? newResult\n        : cloneDeep(newResult),\n      variables,\n      ...(error ? { error } : null),\n    };\n  }\n\n  public reobserveAsConcast(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus,\n  ): Concast<ApolloQueryResult<TData>> {\n    this.isTornDown = false;\n\n    const useDisposableConcast =\n      // Refetching uses a disposable Concast to allow refetches using different\n      // options/variables, without permanently altering the options of the\n      // original ObservableQuery.\n      newNetworkStatus === NetworkStatus.refetch ||\n      // The fetchMore method does not actually call the reobserve method, but,\n      // if it did, it would definitely use a disposable Concast.\n      newNetworkStatus === NetworkStatus.fetchMore ||\n      // Polling uses a disposable Concast so the polling options (which force\n      // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n      newNetworkStatus === NetworkStatus.poll;\n\n    // Save the old variables, since Object.assign may modify them below.\n    const oldVariables = this.options.variables;\n    const oldFetchPolicy = this.options.fetchPolicy;\n\n    const mergedOptions = compact(this.options, newOptions || {});\n    const options = useDisposableConcast\n      // Disposable Concast fetches receive a shallow copy of this.options\n      // (merged with newOptions), leaving this.options unmodified.\n      ? mergedOptions\n      : assign(this.options, mergedOptions);\n\n    // Don't update options.query with the transformed query to avoid\n    // overwriting this.options.query when we aren't using a disposable concast.\n    // We want to ensure we can re-run the custom document transforms the next\n    // time a request is made against the original query.\n    const query = this.transformDocument(options.query);\n\n    this.lastQuery = query;\n\n    if (!useDisposableConcast) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling();\n\n      // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n      if (\n        newOptions &&\n        newOptions.variables &&\n        !equal(newOptions.variables, oldVariables) &&\n        // Don't mess with the fetchPolicy if it's currently \"standby\".\n        options.fetchPolicy !== \"standby\" &&\n        // If we're changing the fetchPolicy anyway, don't try to change it here\n        // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n        options.fetchPolicy === oldFetchPolicy\n      ) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    // If the transform doesn't change the document, leave `options` alone and\n    // use the original object.\n    const fetchOptions = query === options.query ? options : { ...options, query };\n\n    this.waitForOwnResult &&= skipCacheDataFor(fetchOptions.fetchPolicy);\n    const finishWaitingForOwnResult = () => {\n      if (this.concast === concast) {\n        this.waitForOwnResult = false;\n      }\n    };\n    \n    const variables = fetchOptions.variables && { ...fetchOptions.variables };\n    const { concast, fromLink } = this.fetch(fetchOptions, newNetworkStatus);\n    const observer: Observer<ApolloQueryResult<TData>> = {\n      next: result => {\n        finishWaitingForOwnResult();\n        this.reportResult(result, variables);\n      },\n      error: error => {\n        finishWaitingForOwnResult();\n        this.reportError(error, variables);\n      },\n    };\n\n    if (!useDisposableConcast && (fromLink || !this.concast)) {\n      // We use the {add,remove}Observer methods directly to avoid wrapping\n      // observer with an unnecessary SubscriptionObserver object.\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n\n    return concast;\n  }\n\n  public reobserve(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus,\n  ) {\n    return this.reobserveAsConcast(newOptions, newNetworkStatus).promise;\n  }\n\n  // (Re)deliver the current result to this.observers without applying fetch\n  // policies or making network requests.\n  private observe() {\n    this.reportResult(\n      // Passing false is important so that this.getCurrentResult doesn't\n      // save the fetchMore result as this.lastResult, causing it to be\n      // ignored due to the this.isDifferentFromLastResult check in\n      // this.reportResult.\n      this.getCurrentResult(false),\n      this.variables,\n    );\n  }\n\n  private reportResult(\n    result: ApolloQueryResult<TData>,\n    variables: TVariables | undefined,\n  ) {\n    const lastError = this.getLastError();\n    const isDifferent = this.isDifferentFromLastResult(result, variables);\n    // Update the last result even when isDifferentFromLastResult returns false,\n    // because the query may be using the @nonreactive directive, and we want to\n    // save the the latest version of any nonreactive subtrees (in case\n    // getCurrentResult is called), even though we skip broadcasting changes.\n    if (lastError || !result.partial || this.options.returnPartialData) {\n      this.updateLastResult(result, variables);\n    }\n    if (lastError || isDifferent) {\n      iterateObserversSafely(this.observers, \"next\", result);\n    }\n  }\n\n  private reportError(\n    error: ApolloError,\n    variables: TVariables | undefined,\n  ) {\n    // Since we don't get the current result on errors, only the error, we\n    // must mirror the updates that occur in QueryStore.markQueryError here\n    const errorResult = {\n      ...this.getLastResult(),\n      error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false,\n    } as ApolloQueryResult<TData>;\n\n    this.updateLastResult(errorResult, variables);\n\n    iterateObserversSafely(this.observers, 'error', this.last!.error = error);\n  }\n\n  public hasObservers() {\n    return this.observers.size > 0;\n  }\n\n  private tearDownQuery() {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling();\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  }\n\n  private transformDocument(document: DocumentNode) {\n    return this.queryManager.transform(document);\n  }\n}\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n\n// Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\nexport function reobserveCacheFirst<TData, TVars extends OperationVariables>(\n  obsQuery: ObservableQuery<TData, TVars>,\n) {\n  const { fetchPolicy, nextFetchPolicy } = obsQuery.options;\n\n  if (\n    fetchPolicy === \"cache-and-network\" ||\n    fetchPolicy === \"network-only\"\n  ) {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      // Use a temporary nextFetchPolicy function that replaces itself with the\n      // previous nextFetchPolicy value and returns the original fetchPolicy.\n      nextFetchPolicy(this: WatchQueryOptions<TVars, TData>) {\n        // Replace this nextFetchPolicy function in the options object with the\n        // original this.options.nextFetchPolicy value.\n        this.nextFetchPolicy = nextFetchPolicy;\n        // If the original nextFetchPolicy value was a function, give it a\n        // chance to decide what happens here.\n        if (typeof nextFetchPolicy === \"function\") {\n          return nextFetchPolicy.apply(this, arguments);\n        }\n        // Otherwise go back to the original this.options.fetchPolicy.\n        return fetchPolicy!;\n      },\n    });\n  }\n\n  return obsQuery.reobserve();\n}\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error('Unhandled error', error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(\n  missing: MissingFieldError[] | MissingTree | undefined,\n) {\n  if (__DEV__ && missing) {\n    invariant.debug(`Missing cache result fields: %o`, missing);\n  }\n}\n\nfunction skipCacheDataFor(fetchPolicy?: WatchQueryFetchPolicy /* `undefined` would mean `\"cache-first\"` */) {\n  return fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\" || fetchPolicy === \"standby\";\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}