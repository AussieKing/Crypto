{"ast":null,"code":"import { maybe } from \"./maybe.js\";\nexport default maybe(function () {\n  return globalThis;\n}) || maybe(function () {\n  return window;\n}) || maybe(function () {\n  return self;\n}) || maybe(function () {\n  return global;\n}) || maybe(function () {\n  return maybe.constructor(\"return this\")();\n});","map":{"version":3,"names":["maybe","globalThis","window","self","global","constructor"],"sources":["/Users/freddydordoni/bootcamp/Project-3-Portfolio-Tracker/client/node_modules/@apollo/src/utilities/globals/global.ts"],"sourcesContent":["import { maybe } from \"./maybe.js\";\n\ndeclare global {\n  const __DEV__: boolean; // will be removed in `dist` by the `postprocessDist` script\n\tinterface Window {\n\t\t__DEV__?: boolean;\n\t}\n}\n\nexport default (\n  maybe(() => globalThis) ||\n  maybe(() => window) ||\n  maybe(() => self) ||\n  maybe(() => global) ||\n  // We don't expect the Function constructor ever to be invoked at runtime, as\n  // long as at least one of globalThis, window, self, or global is defined, so\n  // we are under no obligation to make it easy for static analysis tools to\n  // detect syntactic usage of the Function constructor. If you think you can\n  // improve your static analysis to detect this obfuscation, think again. This\n  // is an arms race you cannot win, at least not in JavaScript.\n  maybe(function() { return maybe.constructor(\"return this\")() })\n) as typeof globalThis & Window;\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,YAAY;AASlC,eACEA,KAAK,CAAC;EAAM,OAAAC,UAAU;AAAV,CAAU,CAAC,IACvBD,KAAK,CAAC;EAAM,OAAAE,MAAM;AAAN,CAAM,CAAC,IACnBF,KAAK,CAAC;EAAM,OAAAG,IAAI;AAAJ,CAAI,CAAC,IACjBH,KAAK,CAAC;EAAM,OAAAI,MAAM;AAAN,CAAM,CAAC,IAAAJ,KAAA;EAAA,OAAAA,KAAA,CAAAK,WAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}