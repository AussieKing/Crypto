{"ast":null,"code":"import * as React from \"react\";\nexport function useReactiveVar(rv) {\n  var value = rv();\n  var setValue = React.useState(value)[1];\n  React.useEffect(function () {\n    var probablySameValue = rv();\n    if (value !== probablySameValue) {\n      setValue(probablySameValue);\n    } else {\n      return rv.onNextChange(setValue);\n    }\n  }, [value]);\n  return value;\n}","map":{"version":3,"names":["React","useReactiveVar","rv","value","setValue","useState","useEffect","probablySameValue","onNextChange"],"sources":["/Users/freddydordoni/bootcamp/Project-3-Portfolio-Tracker/client/node_modules/@apollo/src/react/hooks/useReactiveVar.ts"],"sourcesContent":["import * as React from \"react\";\nimport type { ReactiveVar } from \"../../core/index.js\";\n\nexport function useReactiveVar<T>(rv: ReactiveVar<T>): T {\n  const value = rv();\n\n  // We don't actually care what useState thinks the value of the variable\n  // is, so we take only the update function from the returned array.\n  const setValue = React.useState(value)[1];\n\n  // We subscribe to variable updates on initial mount and when the value has\n  // changed. This avoids a subtle bug in React.StrictMode where multiple\n  // listeners are added, leading to inconsistent updates.\n  React.useEffect(() => {\n    const probablySameValue = rv();\n    if (value !== probablySameValue) {\n      // If the value of rv has already changed, we don't need to listen for the\n      // next change, because we can report this change immediately.\n      setValue(probablySameValue);\n    } else {\n      return rv.onNextChange(setValue);\n    }\n  }, [value]);\n\n  return value;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAG9B,OAAM,SAAUC,cAAcA,CAAIC,EAAkB;EAClD,IAAMC,KAAK,GAAGD,EAAE,EAAE;EAIlB,IAAME,QAAQ,GAAGJ,KAAK,CAACK,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;EAKzCH,KAAK,CAACM,SAAS,CAAC;IACd,IAAMC,iBAAiB,GAAGL,EAAE,EAAE;IAC9B,IAAIC,KAAK,KAAKI,iBAAiB,EAAE;MAG/BH,QAAQ,CAACG,iBAAiB,CAAC;KAC5B,MAAM;MACL,OAAOL,EAAE,CAACM,YAAY,CAACJ,QAAQ,CAAC;;EAEpC,CAAC,EAAE,CAACD,KAAK,CAAC,CAAC;EAEX,OAAOA,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}